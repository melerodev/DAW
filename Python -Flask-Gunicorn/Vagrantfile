Vagrant.configure("2") do |config|
  config.vm.box = "debian/bullseye64"

  # Máquina maestro
  config.vm.define "FLASK-GUNICORN" do |pythonweb|
    pythonweb.vm.hostname = "FLASK-GUNICORN.sistema.test"
    pythonweb.vm.network "public_network" # Clase
    pythonweb.vm.provider "virtualbox" do |vb|
      vb.name = "FLASK-GUNICORN"
    end
    
    pythonweb.vm.provision "shell", inline: <<-SHELL
      echo "------------------- INSTALACIÓN DE PAQUETES -------------------"
      apt-get update -y
      apt-get install -y nginx python3-pip
      apt-get install git -y
      pip3 install pipenv
      pipenv --version
      pip3 install python-dotenv
      echo "------------------- INSTALACIÓN DE PAQUETES -------------------"

      echo "------------------- CONFIGURACIÓN DE NGINX, FLASK Y GUNICORN, AZURE APP SERVICE COMO ROOT -------------------"
      systemctl status nginx
      mkdir -p /var/www/app
      chown -R vagrant:www-data /var/www/app
      chmod -R 755 /var/www/app
      cp /vagrant/config/.env /var/www/app
      cp /vagrant/config/amz /etc/nginx/sites-available/default
      cp /vagrant/config/application.py /var/www/app
      cp /vagrant/config/wsgi.py /var/www/app
      sudo cp /vagrant/config/application.py .
      sudo cp /vagrant/config/wsgi.py .
      cp /vagrant/flask_app.service /etc/systemd/system
      sudo ln -s /etc/nginx/sites-available/app.conf /etc/nginx/sites-enabled/
      systemctl restart nginx
      systemctl status nginx
      echo "------------------- CONFIGURACIÓN DE NGINX, FLASK Y GUNICORN, AZURE APP SERVICE COMO ROOT -------------------"
    SHELL

    pythonweb.vm.provision "shell", privileged: false, inline: <<-SHELL
      echo "------------------- INSTALACIÓN Y CONFIGURACIÓN DE FLASK Y GUNICORN -------------------"
      cd /var/www/app
      
      # Crear el entorno virtual con pipenv
      pipenv --python 3.9
      pipenv install gunicorn
      
      # Establecer variable de entorno para Flask
      echo 'export FLASK_APP=application.py' >> ~/.bashrc
      echo 'export FLASK_ENV=production' >> ~/.bashrc
      source ~/.bashrc

      # gunicorn --workers 4 --bind 0.0.0.0:5000 wsgi:app
      echo "------------------- INSTALACIÓN Y CONFIGURACIÓN DE FLASK Y GUNICORN -------------------"
    SHELL

    # Tarea de ampliación
    pythonweb.vm.provision "shell", privileged: false, inline: <<-SHELL
    echo "------------------- TAREA DE AMPLICACIÓN -------------------"
      cd /var/www/
      sudo git clone https://github.com/Azure-Samples/msdocs-python-flask-webapp-quickstart
      sudo chown -R vagrant:vagrant /var/www/msdocs-python-flask-webapp-quickstart
      pipenv install -r requirements.txt

      cd /var/www/msdocs-python-flask-webapp-quickstart

      pipenv --python 3.9
      pipenv install flask gunicorn

      sudo cp /vagrant/config/application.py .
      sudo cp /vagrant/config/wsgi.py .

      # Crear el entorno virtual con pipenv
      pipenv --python 3.9
      pipenv install flask gunicorn
      
      # Establecer variable de entorno para Flask
      echo 'export FLASK_APP=application.py' >> ~/.bashrc
      echo 'export FLASK_ENV=production' >> ~/.bashrc
      source ~/.bashrc

      # gunicorn --workers 4 --bind 0.0.0.0:5000 wsgi:app
    echo "------------------- TAREA DE AMPLICACIÓN -------------------"
    SHELL
  end
end
